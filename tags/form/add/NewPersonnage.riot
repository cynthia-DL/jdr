<newpersonnage>
	<div class="container">
		<form class="form-group" method="post" onsubmit={ _submit }>
		<h2>Informations générales</h2>
		<div class="row">
			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Nom</em>
				<input class="form-control" type="text" id="nom">
			</div>
			
			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Prénom</em>
				<input class="form-control" type="text" id="prenom">
			</div>

			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Pv</em>
				<input class="form-control" type="number" id="pv" min="1">
			</div>
		</div>
		<div class="row">
			<div class="col-5 mx-auto mb-3">
				<em class="text-primary">Race</em>
				<select class="form-control" id="race"></select>
			</div>
			<div class="col-5 mx-auto mb-3">
				<em class="text-primary">Genre</em>
				<select class="form-control" id="genre"></select>
			</div>
		</div>
		<div class="row">
			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Âge</em>
				<input class="form-control" type="number" id="age" min="0" max="99999">
			</div>
			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Niveau</em>
				<input class="form-control" type="number" id="niveau">
			</div>
			
			<div class="col-3 mx-auto mb-3">
				<em class="text-primary">Classe</em>
				<select class="form-control" id="classe"></select>
			</div>
		</div>
		<div class="row">
			<div class="mx-auto mb-3 col">
				<em class="text-primary">Lore</em>
				<textarea class="form-control" id="lore" rows="3"></textarea>
			</div>
		</div>
		<h2>Statistiques</h2>
		<div class="row">
				<table class="table table-hover mx-auto ">
				  <thead>
				    <tr class="table-active">
				      <th scope="col">Force</th>
				      <th scope="col">Agilité</th>
				      <th scope="col">Social</th>
				      <th scope="col">Perception</th>
				      <th scope="col">Mental</th>
				      <th scope="col">Intelligence</th>
				      <th scope="col">Constitution</th>
				    </tr>
				    <tr>
				      <td scope="col">
				      	<input class="form-control" type="number" id="force" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="agilite" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="social" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="perception" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="mental" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="intelligence" min="20" max="80">
				      </td>
				      <td scope="col">
				      	<input class="form-control" type="number" id="constitution" min="20" max="80">
				      </td>
				    </tr>
				  </thead>
				</table>
		</div>
		<div class="row">
			<button class="btn btn-primary mx-auto" type="submit">
				Créer ce personnage
			</button>
		</div>
	</form>
	</div>
	<script>
		export default {
			state : {
				enumGenre : [],
				enumClasse : [],
				enumRace : []
			},

			onMounted(props, state){
				var genre = document.querySelector("#genre");
				var classe = document.querySelector("#classe");
				var race = document.querySelector("#race");

				this.props.sa.getAllGenre().then(
					(e) => {
						this.state.enumGenre = JSON.parse(e);
						this.update();

						for (var i = 0; i < this.state.enumGenre.length; i++) {
							var tmp = document.createElement("option");
							tmp.value = this.state.enumGenre[i].idGenre;
							tmp.innerText = this.state.enumGenre[i].nomGenre;
							genre.appendChild(tmp);

						}

						this.props.sa.getAllClasse().then(
							(e) => {
								this.state.enumClasse = JSON.parse(e);
								this.update();

								for (i = 0; i < this.state.enumClasse.length; i++) {
									tmp = document.createElement("option");
									tmp.value = this.state.enumClasse[i].idClasse;
									tmp.innerText = this.state.enumClasse[i].nomClasse;
									classe.appendChild(tmp);
								}

								this.props.sa.getAllRace().then(
									(e) => {
										this.state.enumRace = JSON.parse(e);
										this.update();

										for (i = 0; i < this.state.enumRace.length; i++) {
											tmp = document.createElement("option");
											tmp.value = this.state.enumRace[i].idRace;
											tmp.innerText = this.state.enumRace[i].nomRace;
											race.appendChild(tmp);

										}
									}
								);
							}
						);
					}
				);
			},

			_submit(e){
				e.preventDefault();

				let nom = document.querySelector("#nom").value;
				let prenom = document.querySelector("#prenom").value;
				let pv = document.querySelector("#pv").value;
				let race = document.querySelector("#race").value;
				let genre = document.querySelector("#genre").value;
				let age = document.querySelector("#age").value;
				let niveau = document.querySelector("#niveau").value;
				let classe = document.querySelector("#classe").value;
				let lore = document.querySelector("#lore").value;
				let force = document.querySelector("#force").value;
				let agilite = document.querySelector("#agilite").value;
				let social = document.querySelector("#social").value;
				let perception = document.querySelector("#perception").value;
				let mental = document.querySelector("#mental").value;
				let intelligence = document.querySelector("#intelligence").value;
				let constitution = document.querySelector("#constitution").value;

				this.props.sa.addPersonnage(nom, prenom, pv, race, genre, age, niveau, classe, lore, force, agilite, social, perception, mental, intelligence, constitution).then(
					(e) => {
						alert("Un personnage a été créé!");
						this.props.fct();
					}
				);

			}
		}
	</script>
</newpersonnage>